using System;
using System.Reflection;
using System.Reflection.Emit;

namespace MemoryLeaker.LeakerLibrary
{
    //
    public class ClassBuilder
    {
        private readonly ModuleBuilder _moduleBuilder;

        public static ClassBuilder Instance => new ClassBuilder();

        private ClassBuilder()
        {
            var assemblyName = new AssemblyName("LeakerFactory");
            var assemblyBuilder = AssemblyBuilder.DefineDynamicAssembly(assemblyName, AssemblyBuilderAccess.Run);

            _moduleBuilder = assemblyBuilder.DefineDynamicModule("LeakerModule");
        }

        public T CreateImplementation<T>()
        {
            var interfaceType = typeof(T);
            var typeBuilder = _moduleBuilder.DefineType("Leaker.AutoGenerated.DummyClass", TypeAttributes.Public | TypeAttributes.Sealed);
            typeBuilder.AddInterfaceImplementation(interfaceType);

            var constructedType = typeBuilder.CreateTypeInfo().AsType();

            return (T) Activator.CreateInstance(constructedType);
        }

    }
}
